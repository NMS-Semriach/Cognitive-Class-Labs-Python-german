0
00:00:01,069 --> 00:00:07,040
In diesem Video werden wir Listen und Tupel behandeln, diese werden zusammengesetzte Datentypen genannt und sind

1
00:00:07,040 --> 00:00:12,059
einer der Schlüsseltypen von Datenstrukturen in Python.

2
00:00:12,059 --> 00:00:15,889
Tupel sind eine geordnete Abfolge.

3
00:00:15,889 --> 00:00:18,740
Hier ist ein Tupel "Bewertungen"

4
00:00:18,740 --> 00:00:22,990
Tupel werden als kommagetrennte Elemente innerhalb von Klammern geschrieben.

5
00:00:22,990 --> 00:00:26,710
Dies sind Werte innerhalb der Klammern.

6
00:00:26,710 --> 00:00:31,080
In Python gibt es verschiedene Typen: Strings, Integer, Float.

7
00:00:31,080 --> 00:00:35,860
Sie können alle in einem Tupel enthalten sein, aber der Typ der Variablen ist Tupel.

8
00:00:35,860 --> 00:00:39,480
Auf jedes Element eines Tupels kann über einen Index zugegriffen werden.

9
00:00:39,480 --> 00:00:43,480
Die folgende Tabelle stellt die Beziehung zwischen dem Index und den Elementen im

10
00:00:43,480 --> 00:00:44,600
Tupel dar.

11
00:00:44,600 --> 00:00:48,899
Auf das erste Element kann über den Namen des Tupels zugegriffen werden, gefolgt von einer eckigen Klammer

12
00:00:48,899 --> 00:00:52,600
mit der Indexnummer, in diesem Fall Null.

13
00:00:52,600 --> 00:00:55,399
Auf das zweite Element können wir wie folgt zugreifen.

14
00:00:55,399 --> 00:00:58,010
Wir können auch auf das letzte Element zugreifen.

15
00:00:58,010 --> 00:01:00,949
In Python können wir einen negativen Index verwenden.

16
00:01:00,949 --> 00:01:03,260
Die Beziehung ist wie folgt.

17
00:01:03,260 --> 00:01:06,140
Die entsprechenden Werte werden hier angezeigt.

18
00:01:06,140 --> 00:01:09,630
Wir können Tupel verknüpfen oder kombinieren, indem wir sie addieren.

19
00:01:09,630 --> 00:01:14,189
Hier ist das Ergebnis mit folgendem Index.

20
00:01:14,189 --> 00:01:18,960
Wenn wir mehrere Elemente aus einem Tupel haben möchten, können wir auch Tupel teilen.

21
00:01:18,960 --> 00:01:24,009
Wenn wir zum Beispiel die ersten drei Elemente wollen, verwenden wir den folgenden Befehl.

22
00:01:24,009 --> 00:01:27,740
Der letzte Index ist um 1 größer als der gewünschte Index.

23
00:01:27,740 --> 00:01:32,509
Ähnlich verhält es sich, wenn wir die letzten beiden Elemente wollen, mit folgendem Befehl.

24
00:01:32,509 --> 00:01:37,470
Beachten Sie, dass der letzte Index um 1 größer als die Länge des Tupels ist.

25
00:01:37,470 --> 00:01:41,759
Wir können den Befehl "len" verwenden, um die Länge eines Tupels zu erhalten.

26
00:01:41,759 --> 00:01:45,530
Da es 5 Elemente gibt, ist das Ergebnis fünf.

27
00:01:45,530 --> 00:01:48,450
Tupel sind unveränderlich.

28
00:01:48,450 --> 00:01:53,840
Um zu sehen, warum dies wichtig ist, wollen wir sehen, was passiert, wenn wir die Variable Ratings 1 auf

29
00:01:53,840 --> 00:01:55,270
ratings setzen.

30
00:01:55,270 --> 00:02:00,030
Ein Bild soll helfen, um eine vereinfachte Erklärung der Vorgänge zu geben.

31
00:02:00,030 --> 00:02:06,240
Jede Variable enthält kein Tupel, sondern verweist auf dasselbe unveränderliche Tupelobjekt.

32
00:02:06,240 --> 00:02:11,200
Siehe das Modul 'Objekte und Klassen' für mehr über Objekte.

33
00:02:11,200 --> 00:02:14,870
Nehmen wir an, wir wollen das Element bei Index 2 ändern.

34
00:02:14,870 --> 00:02:17,720
Weil Tupel unveränderlich sind, können wir es nicht.

35
00:02:17,720 --> 00:02:22,430
Daher wird das Rating 1 von einer Änderung des Ratings nicht beeinflusst, da das Tupel

36
00:02:22,430 --> 00:02:25,880
unveränderlich ist.

37
00:02:25,880 --> 00:02:29,170
Wir können der Variable "Ratings" ein anderes Tupel zuweisen.

38
00:02:29,170 --> 00:02:33,030
Die Variable Ratings referenziert nun ein weiteres Tupel.

39
00:02:33,030 --> 00:02:38,120
Als Folge der Unveränderlichkeit müssen wir, wenn wir ein Tupel manipulieren wollen,

40
00:02:38,120 --> 00:02:40,310
stattdessen ein neues Tupel erzeugen.

41
00:02:40,310 --> 00:02:44,940
Wenn wir zum Beispiel ein Tupel sortieren möchten, verwenden wir die Funktion sorted.

42
00:02:44,940 --> 00:02:47,150
Die Eingabe ist das Original-Tupel.

43
00:02:47,150 --> 00:02:50,100
Die Ausgabe ist ein neu sortiertes Tupel.

44
00:02:50,100 --> 00:02:53,970
Mehr zu den Funktionen finden Sie in unserem Video zu den Funktionen.

45
00:02:53,970 --> 00:03:00,810
Ein Tupel kann neben anderen Tupeln auch andere komplexe Datentypen enthalten; dies wird als Verschachtelung bezeichnet.

46
00:03:00,810 --> 00:03:04,950
Auf diese Elemente können wir mit den üblichen Indizierungsmethoden zugreifen.

47
00:03:04,950 --> 00:03:10,080
Wenn wir einen Index mit einem Tupel auswählen, gilt die gleiche Indexkonvention.

48
00:03:10,080 --> 00:03:14,170
Und so können wir dann auf Werte im Tupel zugreifen.

49
00:03:14,170 --> 00:03:17,730
Zum Beispiel könnten wir auf das zweite Element zugreifen.

50
00:03:17,730 --> 00:03:21,380
Wir können diese Indizierung direkt auf die Tupelvariable NT anwenden.

51
00:03:21,380 --> 00:03:25,380
Es ist hilfreich, dies als Baum zu visualisieren.

52
00:03:25,380 --> 00:03:27,980
Wir können uns diese Verschachtelung als Baum vorstellen.

53
00:03:27,980 --> 00:03:30,700
Das Tupel hat die folgenden Indizes.

54
00:03:30,700 --> 00:03:36,190
Wenn wir Indizes mit anderen Tupeln betrachten, sehen wir, dass das Tupel bei Index 2 ein Tupel

55
00:03:36,190 --> 00:03:38,060
mit zwei Elementen enthält.

56
00:03:38,060 --> 00:03:40,110
Wir können auf diese beiden Indizes zugreifen.

57
00:03:40,110 --> 00:03:44,090
Dieselbe Konvention gilt für den Index 3.

58
00:03:44,090 --> 00:03:47,350
Wir können auch auf die Elemente in diesen Tupeln zugreifen.

59
00:03:47,350 --> 00:03:50,060
Wir können den Prozess fortsetzen.

60
00:03:50,060 --> 00:03:54,870
Wir können sogar auf tiefere Ebenen des Baumes zugreifen, indem wir eine weitere eckige Klammer hinzufügen.

61
00:03:54,870 --> 00:03:59,340
Wir können auf verschiedene Zeichen im String oder auf verschiedene Elemente im zweiten Tupel

62
00:03:59,340 --> 00:04:01,930
, das im ersten enthalten ist, zugreifen.

63
00:04:01,930 --> 00:04:05,610
Listen sind auch eine beliebte Datenstruktur in Python.

64
00:04:05,610 --> 00:04:08,330
Auch Listen sind eine geordnete Folge.

65
00:04:08,330 --> 00:04:13,770
Hier ist eine Liste L. Eine Liste wird mit eckigen Klammern dargestellt.

66
00:04:13,770 --> 00:04:19,370
In vielerlei Hinsicht sind Listen wie Tupel, ein wesentlicher Unterschied ist, dass sie veränderbar sind.

67
00:04:19,370 --> 00:04:22,940
Listen können Strings, Floats und Integer enthalten.

68
00:04:22,940 --> 00:04:25,310
Wir können andere Listen verschachteln.

69
00:04:25,310 --> 00:04:31,910
Wir verschachteln auch Tupel und andere Datenstrukturen; für die Verschachtelung gelten die gleichen Indexierungskonventionen.

70
00:04:31,910 --> 00:04:36,510
Wie Tupel kann auf jedes Element einer Liste über einen Index zugegriffen werden.

71
00:04:36,510 --> 00:04:40,970
Die folgende Tabelle stellt die Beziehung zwischen dem Index und den Elementen in

72
00:04:40,970 --> 00:04:41,990
der Liste dar.

73
00:04:41,990 --> 00:04:46,520
Auf das erste Element kann über den Namen der Liste zugegriffen werden, gefolgt von einer eckigen Klammer

74
00:04:46,520 --> 00:04:50,550
mit der Indexnummer, in diesem Fall Null.

75
00:04:50,550 --> 00:04:53,740
Auf das zweite Element können wir wie folgt zugreifen.

76
00:04:53,740 --> 00:04:56,730
Wir können auch auf das letzte Element zugreifen.

77
00:04:56,730 --> 00:05:00,330
In Python können wir einen negativen Index verwenden.

78
00:05:00,330 --> 00:05:02,800
Die Beziehung ist wie folgt.

79
00:05:02,800 --> 00:05:06,330
Die entsprechenden Indizes lauten wie folgt.

80
00:05:06,330 --> 00:05:09,250
Wir können auch mit Slicing arbeiten.

81
00:05:09,250 --> 00:05:14,880
Wenn wir zum Beispiel die letzten beiden Elemente in dieser Liste haben wollen, verwenden wir den folgenden Befehl.

82
00:05:14,880 --> 00:05:19,150
Beachten Sie, dass der letzte Index um 1 größer als die Länge der Liste ist.

83
00:05:19,150 --> 00:05:23,150
Die Indexkonventionen für Listen und Tupel sind identisch.

84
00:05:23,150 --> 00:05:25,840
In den Labs finden sich weitere Beispiele.

85
00:05:25,840 --> 00:05:29,300
Wir können Listen verknüpfen oder kombinieren, indem wir sie addieren.

86
00:05:29,300 --> 00:05:31,270
Hier ist das Ergebnis.

87
00:05:31,270 --> 00:05:34,770
Die neue Liste hat die folgenden Indizes.

88
00:05:34,770 --> 00:05:37,900
Listen sind veränderbar.

89
00:05:37,900 --> 00:05:42,620
Zum Beispiel wenden wir die Methode extends an, indem wir einen "Punkt", gefolgt vom Namen der Methode,

90
00:05:42,620 --> 00:05:44,740
dann Klammern hinzufügen.

91
00:05:44,740 --> 00:05:49,830
Das Argument innerhalb der Klammer ist eine neue Liste, die wir mit der

92
00:05:49,830 --> 00:05:51,410
ursprünglichen Liste verknüpfen werden.

93
00:05:51,410 --> 00:05:57,830
In diesem Fall wird anstelle der Erstellung einer neuen Liste L1 die ursprüngliche Liste L durch Hinzufügen von

94
00:05:57,830 --> 00:05:59,920
zwei neuen Elementen verändert.

95
00:05:59,920 --> 00:06:04,850
Um mehr über Methoden zu erfahren, schauen Sie sich unser Video über Objekte und Klassen an.

96
00:06:04,850 --> 00:06:06,970
Eine weitere ähnliche Methode ist append.

97
00:06:06,970 --> 00:06:12,150
Wenn wir append anstelle von extend anwenden, fügen wir ein Element der Liste hinzu.

98
00:06:12,150 --> 00:06:16,300
Wenn wir uns den Index ansehen, gibt es jetzt ein weiteres Element.

99
00:06:16,300 --> 00:06:19,610
Index 3 enthält die Liste, die wir angehängt haben.

100
00:06:19,610 --> 00:06:22,740
Jedes Mal, wenn wir eine Methode anwenden, ändert sich die Liste.

101
00:06:22,740 --> 00:06:27,210
Wenn wir extend anwenden, fügen wir zwei neue Elemente der Liste hinzu.

102
00:06:27,210 --> 00:06:31,420
Die Liste L wird durch Hinzufügen von zwei neuen Elementen modifiziert.

103
00:06:31,420 --> 00:06:37,570
Wenn wir den String "A" anhängen, ändern wir die Liste weiter mittels append.

104
00:06:37,570 --> 00:06:40,200
Listen können verändert werden.

105
00:06:40,200 --> 00:06:43,930
Zum Beispiel können wir das erste Element wie folgt ändern.

106
00:06:43,930 --> 00:06:49,090
Die Liste wird nun zu: "hard rock", 10, 1.2.

107
00:06:49,090 --> 00:06:54,290
Wir können ein Element einer Liste mit dem "del"-Befehl löschen; wir übergeben einfach das Listenelement, das wir

108
00:06:54,290 --> 00:06:57,480
entfernen möchten, als Argument an.

109
00:06:57,480 --> 00:07:04,310
Wenn wir zum Beispiel das erste Element entfernen möchten, wird das Ergebnis 10,1.2.

110
00:07:04,310 --> 00:07:06,280
Wir können das zweite Element löschen.

111
00:07:06,280 --> 00:07:09,850
Diese Operation entfernt das zweite Element aus der Liste.

112
00:07:09,850 --> 00:07:13,090
Wir können einen String mit Split in eine Liste konvertieren.

113
00:07:13,090 --> 00:07:18,040
Die Methode split wandelt z.B. jede durch ein Leerzeichen getrennte Gruppe von Zeichen in

114
00:07:18,040 --> 00:07:20,280
ein Element einer Liste um.

115
00:07:20,280 --> 00:07:24,630
Wir können die Split-Funktion verwenden, um Strings bei einem bestimmten

116
00:07:24,630 --> 00:07:26,240
Trennzeichen aufzuteilen.

117
00:07:26,240 --> 00:07:31,340
Als Argument übergeben wir einfach das Trennzeichen, an dem wir trennen möchten, in diesem Fall ein

118
00:07:31,340 --> 00:07:32,360
Komma.

119
00:07:32,360 --> 00:07:36,850
Das Ergebnis ist eine Liste. Jedes Element entspricht einer Menge von Zeichen, die durch ein

120
00:07:36,850 --> 00:07:38,540
Komma getrennt sind.

121
00:07:38,540 --> 00:07:45,900
Wenn wir eine Variable setzen, B gleich A, dann verweisen sowohl A als auch B auf dieselbe Liste.

122
00:07:45,900 --> 00:07:49,290
Mehrere Namen, die sich auf dasselbe Objekt beziehen, werden als Aliasing bezeichnet.

123
00:07:49,290 --> 00:07:55,060
Wir wissen von vorhin, dass das erste Element in B auf hard rock gesetzt wurde.

124
00:07:55,060 --> 00:08:00,070
Wenn wir das erste Element in "A" in „banana" ändern, erhalten wir einen Nebeneffekt;

125
00:08:00,070 --> 00:08:02,550
auch der Wert von B wird sich als Folge davon ändern.

126
00:08:02,550 --> 00:08:08,840
"A" und "B" beziehen sich auf die gleiche Liste, wenn wir also "A" ändern,

127
00:08:08,840 --> 00:08:10,300
ändert sich auch die Liste "B".

128
00:08:10,300 --> 00:08:15,810
Wenn wir das erste Element von B nach der Änderung von Liste "A" überprüfen, erhalten wir banana statt

129
00:08:15,810 --> 00:08:17,210
hard rock.

130
00:08:17,210 --> 00:08:21,480
Sie können die Liste "A" mit folgender Syntax klonen.

131
00:08:21,480 --> 00:08:24,430
Die Variable "A" bezieht sich auf eine Liste.

132
00:08:24,430 --> 00:08:28,150
Die Variable "B" verweist auf eine neue Kopie oder einen Klon der ursprünglichen Liste.

133
00:08:28,150 --> 00:08:32,460
Wenn Sie jetzt "A" ändern, ändert sich "B" nicht.

134
00:08:32,460 --> 00:08:37,560
Wir können mehr Informationen über Listen, Tupel und viele andere Objekte in Python mit dem

135
00:08:37,559 --> 00:08:38,690
help-Befehl erhalten.

136
00:08:38,690 --> 00:08:43,120
Einfach die Liste, das Tupel oder ein beliebiges anderes Python-Objekt übergeben.

137
00:08:43,120 --> 00:08:44,590
In den Labs erfahren Sie, was Sie mit Listen machen können.