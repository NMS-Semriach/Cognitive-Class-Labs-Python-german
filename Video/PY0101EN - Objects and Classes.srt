0
00:00:00,510 --> 00:00:04,970
In this module, we are going to talk about objects and classes.

1
00:00:04,970 --> 00:00:12,850
Python has many different kinds of data types: Integers, Floats, Strings, Lists, Dictionaries,

2
00:00:12,850 --> 00:00:16,510
Booleans. In Python each is an object.

3
00:00:16,510 --> 00:00:22,240
Every object has the following: a type, internal representation, a set of functions called

4
00:00:22,240 --> 00:00:27,110
methods to interact with the data. An object is an instance of a particular type.

5
00:00:27,110 --> 00:00:31,539
For example, we have two types: type one and type two.

6
00:00:31,539 --> 00:00:36,399
We can have several objects of type one as shown in yellow. Each object is an instance

7
00:00:36,399 --> 00:00:40,190
of type one. We also have several objects of type two shown

8
00:00:40,190 --> 00:00:43,929
in green. Each object is an instance of type two.

9
00:00:43,929 --> 00:00:50,359
Let’s do several less abstract examples. Every time we create an Integer, we are creating

10
00:00:50,359 --> 00:00:55,109
an instance of type integer, or we are creating an integer object.

11
00:00:55,109 --> 00:01:01,659
In this case, we are creating five instances of type integer or five integer objects.

12
00:01:01,659 --> 00:01:07,181
Similarly, every time we create a list, we are creating an instance of type list, or

13
00:01:07,181 --> 00:01:12,140
we are creating a list object. In this case, we are creating five instances

14
00:01:12,140 --> 00:01:18,080
of type list or five list objects. We can find out the type of an object by using

15
00:01:18,080 --> 00:01:22,980
the type command. In this case, we have an object of type list.

16
00:01:22,980 --> 00:01:26,900
We have an object of type integer. We have an object of type string.

17
00:01:26,900 --> 00:01:32,670
Finally, we have an object of type dictionary. A class or type’s methods are functions

18
00:01:32,670 --> 00:01:35,730
that every instance of that class or type provides.

19
00:01:35,730 --> 00:01:40,600
It’s how you interact with the object. We have been using methods all this time,

20
00:01:40,600 --> 00:01:44,930
for example, on lists. Sorting is an example of a method that interacts

21
00:01:44,930 --> 00:01:48,840
with the data in the object. Consider the list Ratings.

22
00:01:48,840 --> 00:01:52,090
The data is a series of numbers contained within the list.

23
00:01:52,090 --> 00:01:54,780
The method sort will change the data within the object

24
00:01:54,780 --> 00:01:59,380
We call the method by adding a period at the end of the object’s name and the method’s

25
00:01:59,380 --> 00:02:05,650
name we would like to call with parenthesis. We have the ratings list represented in orange.

26
00:02:05,650 --> 00:02:08,940
The data contained in the list is a sequence of numbers.

27
00:02:08,940 --> 00:02:13,160
We call the sort method. This changes the data contained in the object.

28
00:02:13,160 --> 00:02:18,590
You can say it changes the state of the object. We can call the reverse method on the list,

29
00:02:18,590 --> 00:02:22,219
changing the list again. We call the method, reversing the order of

30
00:02:22,219 --> 00:02:26,060
the sequence within the object. In many cases, you don't have to know the

31
00:02:26,060 --> 00:02:30,370
inner workings of the class and its methods. You just have to know how to use them.

32
00:02:30,370 --> 00:02:33,520
Next we will cover how to construct your own classes.

33
00:02:33,520 --> 00:02:39,230
You can create your own type or class in Python. In this section, you will create a class.

34
00:02:39,230 --> 00:02:43,159
The class has data attributes. The class has methods.

35
00:02:43,159 --> 00:02:48,130
We then create an instances or instances of that class or objects.

36
00:02:48,130 --> 00:02:53,889
The class data attributes define the class. Let's create two classes; the first class

37
00:02:53,889 --> 00:03:00,739
will be a circle, the second will be a rectangle. Let's think about what constitutes a circle.

38
00:03:00,739 --> 00:03:05,340
Examining this image all we need is a radius to define a circle and let's add color to

39
00:03:05,340 --> 00:03:09,760
make it easier to distinguish between different instances of the class later.

40
00:03:09,760 --> 00:03:14,170
Therefore, our class data attributes are radius and color.

41
00:03:14,170 --> 00:03:18,689
Similarly, examining the image in order to define a rectangle, we need the height and

42
00:03:18,689 --> 00:03:21,709
width. We will also add color to distinguish between

43
00:03:21,709 --> 00:03:25,819
instances later. Therefore, the data attributes are color,

44
00:03:25,819 --> 00:03:29,680
height, and width. To create the class circle, you will need

45
00:03:29,680 --> 00:03:34,159
to include the class definition. This tells Python you are creating your own

46
00:03:34,159 --> 00:03:38,530
class, the name of the class. For this course in parenthesis, you will always

47
00:03:38,530 --> 00:03:42,799
place the term object. This is the parent of the class.

48
00:03:42,799 --> 00:03:47,959
For the class rectangle, we change the name of the class, but the rest is kept the same.

49
00:03:47,959 --> 00:03:53,040
Classes are outlines we have to set the attributes to create objects.

50
00:03:53,040 --> 00:03:56,730
We can create an object that is an instance of type circle.

51
00:03:56,730 --> 00:04:01,609
The color data attribute is red and the data attribute radius is four.

52
00:04:01,609 --> 00:04:05,810
We can also create a second object that is an instance of type circle.

53
00:04:05,810 --> 00:04:12,019
In this case, the color data attribute is green and the data attribute radius is two.

54
00:04:12,019 --> 00:04:16,120
We can also create an object that is an instance of type rectangle.

55
00:04:16,120 --> 00:04:21,260
The color data attribute is blue and the data attribute of height and width is 2.

56
00:04:21,260 --> 00:04:26,810
The second object is also an instance of type rectangle; in this case, the color data attribute

57
00:04:26,810 --> 00:04:30,960
is yellow, and the height is one, and the width is three.

58
00:04:30,960 --> 00:04:35,040
We now have different objects of class circle or type circle.

59
00:04:35,040 --> 00:04:39,380
We also have different objects of class rectangle or type rectangle.

60
00:04:39,380 --> 00:04:42,630
Let us continue building the circle class in Python.

61
00:04:42,630 --> 00:04:46,510
We define our class. We then initialize each instance of the class

62
00:04:46,510 --> 00:04:51,000
with data attributes radius and color using the class constructor.

63
00:04:51,000 --> 00:04:55,630
The function "in-it" is a constructor. It’s a special function that tells Python you are

64
00:04:55,630 --> 00:04:59,470
making a new class. There are other special functions in Python

65
00:04:59,470 --> 00:05:04,340
to make more complex classes. The ‘radius’ and ‘color’ parameters

66
00:05:04,340 --> 00:05:09,870
are used to initialize the radius and color data attributes of the class instance.

67
00:05:09,870 --> 00:05:14,970
The ’self’ parameter refers to the newly created instance of the class.

68
00:05:14,970 --> 00:05:19,170
The parameters ’radius’ and ’color’ can be used in the constructor’s body to

69
00:05:19,170 --> 00:05:24,030
access the values passed to the class constructor when the class is constructed.

70
00:05:24,030 --> 00:05:29,240
We can set the value of the radius and color data attributes to the values passed to the

71
00:05:29,240 --> 00:05:33,400
constructor method. Similarly, we can define the class rectangle

72
00:05:33,400 --> 00:05:36,960
in Python. The name of the class is different.

73
00:05:36,960 --> 00:05:41,010
This time the class data attributes are color, height and width.

74
00:05:41,010 --> 00:05:46,460
After we have created the class, in order to create an object of class circle, we introduce

75
00:05:46,460 --> 00:05:53,400
a variable; this will be the name of the object. We create the object by using the object constructor.

76
00:05:53,400 --> 00:05:58,490
The object constructor consists of the name of the class, as well as the parameters.

77
00:05:58,490 --> 00:06:02,860
These are the data attributes. When we create a Circle object we call the

78
00:06:02,860 --> 00:06:06,960
code like a function. The arguments passed to the Circle constructor

79
00:06:06,960 --> 00:06:12,750
are used to initialize the data attributes of the newly created Circle instance.

80
00:06:12,750 --> 00:06:18,650
It is helpful to think of self as a box that contains all the data attributes of the object.

81
00:06:18,650 --> 00:06:23,510
Typing the object's name followed by a dot and the data attribute name gives us the data

82
00:06:23,510 --> 00:06:28,820
attribute value, for example radius. In this case, the radius is ten.

83
00:06:28,820 --> 00:06:32,460
We can do the same for color. We can see the relationship between the self

84
00:06:32,460 --> 00:06:37,950
parameter and the object. In Python, we can also set or change the data

85
00:06:37,950 --> 00:06:41,810
attribute directly. Typing the object's name, followed by a dot

86
00:06:41,810 --> 00:06:47,050
and the data attribute name, and set it equal to the corresponding value.

87
00:06:47,050 --> 00:06:50,560
We can verify that the color data attribute has changed.

88
00:06:50,560 --> 00:06:55,170
Usually, in order to change the data in an object we define methods in the class.

89
00:06:55,170 --> 00:06:59,970
Let’s discuss methods. We have seen how data attributes consist of

90
00:06:59,970 --> 00:07:04,450
the data defining the objects. Methods are functions that interact and change

91
00:07:04,450 --> 00:07:09,520
the data attributes, changing or using the data attributes of the object.

92
00:07:09,520 --> 00:07:13,780
Let's say we would like to change the size of a circle; this involves changing the radius

93
00:07:13,780 --> 00:07:17,830
attribute. We add a method "add radius" to the class

94
00:07:17,830 --> 00:07:20,640
Circle. The method is a function that requires the

95
00:07:20,640 --> 00:07:25,310
self as well as other parameters. In this case, we are going to add a value

96
00:07:25,310 --> 00:07:30,890
to the radius; we denote that value as r. We are going to add r to the data attribute

97
00:07:30,890 --> 00:07:34,130
radius. Let's see how this part of the code works

98
00:07:34,130 --> 00:07:37,930
when we create an object and call the add radius method.

99
00:07:37,930 --> 00:07:41,270
As before, we create an object with the object constructor.

100
00:07:41,270 --> 00:07:46,170
We pass 2 arguments to the constructor; the radius is set to 2 and the color is set to

101
00:07:46,170 --> 00:07:49,620
red. In the constructor’s body, the data attributes

102
00:07:49,620 --> 00:07:52,750
are set. We can use the box analogy to see the current

103
00:07:52,750 --> 00:07:56,730
state of the object. We call the method by adding a dot followed

104
00:07:56,730 --> 00:08:01,270
by the method name and parenthesis. In this case, the argument of the function

105
00:08:01,270 --> 00:08:05,770
is the amount we would like to add. We do not need to worry about the self-parameter

106
00:08:05,770 --> 00:08:10,490
when calling the method—just like with the constructor, Python will take care of that

107
00:08:10,490 --> 00:08:14,480
for us. In many cases, there may not be any parameters

108
00:08:14,480 --> 00:08:19,360
(other than self) specified in the method’s definition, so we don’t pass any arguments

109
00:08:19,360 --> 00:08:23,370
when calling the function. Internally, the method is called with a value

110
00:08:23,370 --> 00:08:31,070
of 8 and the proper self object. The method assigns a new value to self.radius.

111
00:08:31,070 --> 00:08:35,270
This changes the object; in particular, the radius data attribute.

112
00:08:35,270 --> 00:08:40,529
When we call the add radius method, this changes the object by changing the value of the radius

113
00:08:40,529 --> 00:08:44,770
data attribute. We can add default values to the parameters

114
00:08:44,770 --> 00:08:49,130
of a class’s constructor. In the labs, we also create the method called

115
00:08:49,130 --> 00:08:53,120
"Draw Circle.” See the lab for the implementation of draw

116
00:08:53,120 --> 00:08:56,350
circle. In the labs, we can create a new object of

117
00:08:56,350 --> 00:09:00,860
type Circle using the constructor. The color will be red and the radius will

118
00:09:00,860 --> 00:09:05,020
be 3. We can access the data attribute radius.

119
00:09:05,020 --> 00:09:09,770
We can access the attribute color. Finally we can use the method “draw Circle”

120
00:09:09,770 --> 00:09:14,130
to draw the circle. Similarly, we can create a new object of type

121
00:09:14,130 --> 00:09:18,230
Circle. We can access the data attribute of radius.

122
00:09:18,230 --> 00:09:22,670
We can access the data attribute color. We can use the method “draw circle” to

123
00:09:22,670 --> 00:09:26,960
draw the circle. In summary, we have created an object of class

124
00:09:26,960 --> 00:09:33,120
Circle called "red circle" with a Radius attribute of 3 and a Color attribute of red.

125
00:09:33,120 --> 00:09:37,950
We also created an object of class Circle called "blue Circle" with a Radius attribute

126
00:09:37,950 --> 00:09:44,600
of 10 and a Color attribute of blue. In the lab, we have a similar class for rectangle.

127
00:09:44,600 --> 00:09:50,080
We can create a new object of type rectangle using the constructor. We can access a data

128
00:09:50,080 --> 00:09:54,790
attribute of Height. We can also access the data attribute of Width.

129
00:09:54,790 --> 00:09:57,790
We can do the same for the data attribute of Color.

130
00:09:57,790 --> 00:10:01,410
We can use the method “draw Rectangle” to draw the rectangle.

131
00:10:01,410 --> 00:10:07,930
So we have a class, an object that is a realization or instantiation of that class.

132
00:10:07,930 --> 00:10:15,000
For example, we can create two objects of class Circle, or two objects of class Rectangle.

133
00:10:15,000 --> 00:10:20,150
The “D I R” function is useful for obtaining the list of data attributes and methods associated

134
00:10:20,150 --> 00:10:23,520
with a class. The object you’re interested in is passed

135
00:10:23,520 --> 00:10:27,050
as an argument. The return value is a list of that object’s

136
00:10:27,050 --> 00:10:30,960
data attributes. (The attributes surrounded by underscores

137
00:10:30,960 --> 00:10:34,610
are for Internal Use and you shouldn’t have to worry about them.)

138
00:10:34,610 --> 00:10:38,600
The regular-looking attributes are the ones you should concern yourself with, these are

139
00:10:38,600 --> 00:10:43,590
the object’s methods and data attributes. There is a lot more you can do with objects

140
00:10:43,590 --> 00:10:46,600
in Python. Check python.org for more info.

